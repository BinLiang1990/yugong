import React, { useEffect } from 'react';

export interface Manifest {
    exposeEvents: string[];

    settings: {
        style: 
        api: [{
            label: '抽奖',
            url： {type： 'text'},
            method: {type: checkbox, options: ['get', 'post']}
        }, {
            label: '抽奖记录',
            url： {type： 'text'},
            method: {type: checkbox, options: ['get', 'post']}
        }], 
        content: {
            label: '抽奖记录',
        }]
    };
}

export interface ComponentState {


    "抽奖",
    "抽奖记录": 
}

class Modal implements Module {
    public exposeEvents = [{'show'}, 'hide'];

    public settings: {
        events: [{text: '确定' , event:'onOk', desc: '点击确认按钮时触发'}, 'onCancel'];
    };

    private defaultHandlers = {
        onOk: () => this.hide(),
        onCancel: () => this.hide(),
    };

    constructor(config: any) {
        if (config.events) {
            this.defaultHandlers = {
                ...this.defaultHandlers,
                ...config.events,
            };
        }
    }

    public show() {}
    public hide() {}

    private _onOk() {
        this.defaultHandlers.onOk();
    }
}

const model = new Modal({
    events: {
        onOk: () => {
            setTimeout(() => {
                model.hide();
            }, 3000);
        },
    },
});

class Button extends React.Component {
    static exposeEvents = [];

    constructor(props) {
        super(props);
        

        this.id = uuid();
        this.builder = props.builder;
    }
    componentDidMount() {
        this.builder.register(this.id, {
            type: 'button',
            exposeEvents: [],

        });
    }

    render() {
        return null;
    }
}

function ButtonFC() {
    useEffect(() => {

    }, [])
}

ButtonFC.exposeStatic = {}


const buttonConfig = {
    events: {
        onClick: '1.show',
    },
};

const moduleInstances = {
    'uid1': {
        $ref: modal,
        x,
        y,
        api
    },
    'uid2': {
        $ref: button,
    }
};

const eventMappings = {
    '1.show'
};

// 遍历界面上所有组件
for (const moduleId in moduleInstances) {
    // 获取组件暴露的事件
    const { exposeEvents } = moduleInstances[moduleId];
    for (let i = 0; i < exposeEvents.length; i++) {
        // 把事件缓存到一个map里面
        const eventName = exposeEvents[i];
        eventMappings[`${moduleId}.${eventName}`] =
            moduleInstances[moduleId][eventName];
    }
}

// eventMappings = {
//     "1.show": () => {},
//     "1.hide": () => {},
// }
