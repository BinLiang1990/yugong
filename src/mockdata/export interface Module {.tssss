export interface Module {
    exposeEvents: string[];

    settings: {};
}

class Modal implements Module {
    public exposeEvents = ['show', 'hide'];

    public settings: {
        events: ['onOk', 'onCancel'];
    };

    private defaultHandlers = {
        onOk: () => this.hide(),
        onCancel: () => this.hide(),
    };

    constructor(config: any) {
        if (config.events) {
            this.defaultHandlers = {
                ...this.defaultHandlers,
                ...config.events,
            };
        }
    }

    public show() {}
    public hide() {}

    private _onOk() {
        this.defaultHandlers.onOk();
    }
}

const model = new Modal({
    events: {
        onOk: () => {
            setTimeout(() => {
                model.hide();
            }, 3000);
        },
    },
});


const buttonConfig = {
    events: {
        onClick: '1.show'
    }
}

const moduleInstances = {
    1: model,
};

const eventMappings = {};

// 遍历界面上所有组件
for (const moduleId in moduleInstances) {
    // 获取组件暴露的事件
    const { exposeEvents } = moduleInstances[moduleId];
    for (let i = 0; i < exposeEvents.length; i++) {
        // 把事件缓存到一个map里面
        const eventName = exposeEvents[i];
        eventMappings[`${moduleId}.${eventName}`] =
            moduleInstances[moduleId][eventName];
    }
}

// eventMappings = {
//     "1.show": () => {},
//     "1.hide": () => {},
// }