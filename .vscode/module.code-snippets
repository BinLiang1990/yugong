{
	// Place your yugong 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"module component": {
		"prefix": "mdcomponent",
		"body": [
		  "import EventEmitter from '~/core/EventEmitter';",
		  "import { AppDataElementsTypes } from '~/types/appData';",
		  "import { Modules } from '~/types/modules';",
		  "import config from './${1:${TM_FILENAME_BASE/(.*)$/${1}/}}.config';",
		  "import Wrapper from '../Wrapper';",
		  "import useLifeCycle from '~/hooks/useLifeCycle';",
		  "import useStyles from './${1:${TM_FILENAME_BASE/(.*)$/${1}/}}.useStyles';",
		  "",
		  "export interface ${1:${TM_FILENAME_BASE/(.*)$/${1}/}}Props extends AppDataElementsTypes {",
		  "    id: string;",
		  "    eventEmitter: EventEmitter;",
		  "}",
		  "",
		  "const ${1:${TM_FILENAME_BASE/(.*)$/${1}/}}:Modules<${1:${TM_FILENAME_BASE/(.*)$/${1}/}}Props> = (props) => {",
		  "    const { style, moduleId } = props;",
		  "    // inject class from jss",
		  "    const userClass = useStyles(style);",
		  "    // Register events and publish functions",
		  "    const [eventsDispatch] = useLifeCycle(",
		  "        moduleId,",
		  "        // register events",
		  "        {",
		  "            mount: '初始化',",
		  "            unmount: '卸载'",
		  "        },",
		  "        // publish functions",
		  "        { }",
		  "    );",
		  "",
		  "    return (",
		  "        <Wrapper {...props}>",
		  "            <div className={userClass.wrap}>",
		  "             ${1:${TM_FILENAME_BASE/(.*)$/${1}/}}",
		  "            </div>",
		  "        </Wrapper>",
		  "    )",
		  "}",
		  "",
		  "// bind static",
		  "for (const key in config) {",
		  "    if (Object.prototype.hasOwnProperty.call(config, key)) {",
		  "        ${1:${TM_FILENAME_BASE/(.*)$/${1}/}}[key] = config[key];",
		  "    }",
		  "}",
		  "",
		  "export default ${1:${TM_FILENAME_BASE/(.*)$/${1}/}};"
		],
		"description": "module useStyle"
	  },
	"module useStyle": {
		"prefix": "mdstyle",
		"body": [
		  "import { createUseStyles } from \"react-jss\";",
		  "import styleCompiler from \"~/compiler\";",
		  "",
		  "const useStyles = createUseStyles<string, any>({",
		  "  wrap: (style) => styleCompiler(style.wrap).style || {}",
		  "});",
		  "",
		  "export default useStyles;",
		  ""
		],
		"description": "模块样式模板"
	  },
	"module config": {
		"prefix": "mdconfig",
		"body": [
		  "import {",
		  "  ModulesStatic,",
		  "} from \"~/types/modules\";",
		  "",
		  "const config: ModulesStatic = {",
		  "  /**",
		  "   * publish functions",
		  "   */",
		  "  exposeFunctions: [],",
		  "",
		  "  /**",
		  "   * register events",
		  "   */",
		  "  exposeEvents: [",
		  "    {",
		  "      name: \"mount\",",
		  "      description: \"初始化\",",
		  "    },",
		  "    {",
		  "      name: \"unmount\",",
		  "      description: \"卸载\",",
		  "    },",
		  "  ],",
		  "",
		  "  /**",
		  "   * publish Api",
		  "   */",
		  "  exposeApi: [],",
		  "",
		  "  /**",
		  "   * publish defaultporps styles",
		  "   */",
		  "  exposeDefaultProps: {",
		  "    layout: {",
		  "      w: 5, // width",
		  "      h: 3, // height",
		  "    },",
		  "    style: {",
		  "      basic: {},",
		  "      wrap: {},",
		  "    },",
		  "    styleDescription: [",
		  "      {",
		  "        title: \"基础\",",
		  "        value: \"basic\",",
		  "        children: [",
		  "          {",
		  "            title: \"包裹器\",",
		  "            value: \"wrap\",",
		  "            children: [],",
		  "          },",
		  "        ],",
		  "      },",
		  "    ],",
		  "  },",
		  "};",
		  "",
		  "export default config;",
		  ""
		],
		"description": "模块配置模板"
	  }
}